{
	"info": {
		"_postman_id": "0107a6b1-bc35-46c4-97c8-1b577426b695",
		"name": "Automation Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API StarWars 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b808398f-f33a-4cbf-b2b4-d0c347c43e6e",
						"exec": [
							"//1. Correct response format JSON",
							"pm.test(\"Correct response format JSON\", function() {",
							"    pm.response.to.have.jsonBody()",
							"});",
							"",
							"//2. Have all the declared fields in response",
							"pm.test(\"Check that we have all the declared fields\", function() {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property(\"people\");",
							"    pm.expect(jsonData).to.have.property(\"planets\");",
							"    pm.expect(jsonData).to.have.property(\"films\");",
							"    pm.expect(jsonData).to.have.property(\"species\");",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");",
							"    pm.expect(jsonData).to.have.property(\"starships\");",
							"});",
							"",
							"//3. Field value isn't NULL",
							"pm.test(\"Field value isn't NULL\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"    ",
							"});",
							"",
							"//4. Field value isn't empty",
							"pm.test(\"Field value isn't empty\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(\"\");",
							"    pm.expect(jsonData.planets).not.equal(\"\");",
							"    pm.expect(jsonData.films).not.equal(\"\");",
							"    pm.expect(jsonData.species).not.equal(\"\");",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");",
							"    pm.expect(jsonData.starships).not.equal(\"\");",
							"});",
							"",
							"//5. Check if field corresponds to a specific values",
							"pm.test(\"Check if field corresponds to a specific values\", function(){",
							"      var jsonData = pm.response.json();",
							"      pm.expect(jsonData.people).to.equal(\"https://swapi.co/api/people/\");",
							"      pm.expect(jsonData.planets).to.equal(\"https://swapi.co/api/planets/\");",
							"      pm.expect(jsonData.films).to.equal(\"https://swapi.co/api/films/\");",
							"      pm.expect(jsonData.species).to.equal(\"https://swapi.co/api/species/\");",
							"      pm.expect(jsonData.vehicles).to.equal(\"https://swapi.co/api/vehicles/\");",
							"      pm.expect(jsonData.starships).to.equal(\"https://swapi.co/api/starships/\");",
							" ",
							"    ",
							"});",
							"",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//7.Status message is ok",
							"pm.test(\"Status message is ok\", function() {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"",
							"//9. There is a specific header in the response",
							"pm.test(\"There is a specific header in the response\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"//10. The response has a specific header with a specific value",
							"pm.test(\"The response has a specific header with a specific value\", function(){",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
							"});",
							"",
							"//11. Cookie exists",
							"pm.test(\"cookie exists\", function(){",
							"    pm.cookies.has(\"__cfduid\");",
							"});",
							"",
							"//12. Cookie has value",
							"pm.test(\"Cookie has value\", function() {",
							"    try{",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");",
							"        console.log(MY_COOKIE);",
							"    } catch(e){",
							"        console.log(\"some problem with cookie -> \" + e);",
							"    } ",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Validation Body Response",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e62b56cf-219f-4008-9ebe-1dd0975054be",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    // specify the type of object",
							"    \"type\": \"object\",",
							"    //specify requires properties",
							"    \"required\": [\"people\", \"planets\",\"films\", \"species\",\"vehicles\", \"starships\"],",
							"    //describe the properties",
							"    \"properties\": {",
							"        \"people\": {\"type\":\"string\"},",
							"        \"planets\": {\"type\":\"string\"},",
							"        \"films\": {\"type\":\"string\"},",
							"        \"species\": {\"type\":\"string\"},",
							"        \"vehicles\": {\"type\":\"string\"},",
							"        \"starships\": {\"type\":\"string\"}",
							"        ",
							"    }",
							"    ",
							"};",
							"",
							"pm.test(\"body is correct\", function() {",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"})",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Valid. Body with Arrays",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "637d12dc-a428-4f8e-a348-92b843880815",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"vehicles\", \"species\", \"starships\"],",
							"    \"property\": {",
							"        \"name\": {\"type\": \"string\"},",
							"        \"homeworld\": {\"type\": \"string\"},",
							"        \"films\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"string\"}",
							"        },",
							"        \"species\": {",
							"            \"type\": \"array\",",
							"            \"items\": { \"type\": \"string\"}",
							"        },",
							"        \"vehicles\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"string\"}",
							"        },",
							"        \"starships\": {",
							"            \"type\":\"array\",",
							"            \"items\": {\"type\": \"string\"}",
							"            },",
							"        }",
							"    };",
							"    ",
							"pm.test(\"Body is correct\", function(){",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"    ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Basic auth",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "postman-echo.com/basic-auth",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}